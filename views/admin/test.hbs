blockUser:(userId)=>{
    return new Promise((resolve, reject)=>{
        db.get().collection('shop').updateOne({_id:objectId(userId)},{$set:{block:true}}).then(()=>{
            resolve()
        })
    })
},

activeUser:(userId)=>{
    return new Promise((resolve, reject)=>{
        db.get().collection('shop').updateOne({_id:objectId(userId)},{$set:{block:false}}).then(()=>{
            resolve()
    })
})
},



{{!-- // --}}
block_user: (req, res) => {
    try {
      let userId = req.params.id;
      userHelpers.blockUser(userId).then((response) => {
        res.redirect('/admin/user-manage');
      })

    } catch (error) {
      res.redirect('/err',{error})

    }

  },
{{!--  --}}
  user_active: (req, res) => {
    try {
      let userId = req.params.id;
      console.log(userId)
      userHelpers.activeUser(userId).then((response) => {
        res.redirect('/admin/user-manage');
      })

    } catch (error) {
      res.redirect('/err',{error})
    }

  },
{{!--  --}}

  doLogin:(userData)=>{
        console.log(userData);
      
        return new Promise(async(resolve,reject)=>{
        var loginStatus = false
        let response={}
        var user = await db.get().collection('shop').findOne({Email:userData.Email})
       

        if(user){
            if(user.block){
                console.log("login failed blocked");

                
                response.status=false
            
                 resolve(response)

            }else{
                bcrypt.compare(userData.Password,user.Password).then((status)=>{
                    if(status){
                        console.log("login success");
                        response.user=user
                        response.status=true
                        resolve(response)
                    }else{
                        console.log("login failed");
                        resolve({status:false})
                    }
                })

            }
            
        }else{
            console.log("login failed");
            resolve({status:false})
        }

    })


},